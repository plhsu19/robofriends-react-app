{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","props","name","email","id","className","src","alt","CardList","robots","cardArray","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","style","overflow","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchField","target","value","fetch","then","response","json","users","robotsFiltered","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"oOAeeA,EAbF,SAACC,GAAW,IACbC,EAAoBD,EAApBC,KAAMC,EAAcF,EAAdE,MAAOC,EAAOH,EAAPG,GACrB,OACI,yBAAKC,UAAU,uDACX,yBAAKC,IAAG,+BAA0BF,EAA1B,iBAA6CG,IAAI,WACzD,6BACI,4BAAKL,GACL,2BAAIC,MCkBLK,EAvBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAEVC,EAAYD,EAAOE,KAAI,SAACC,EAAMC,GAChC,OACI,kBAAC,EAAD,CACIC,IAAKD,EACLX,KAAMO,EAAOI,GAAGX,KAChBC,MAAOM,EAAOI,GAAGV,MACjBC,GAAIK,EAAOI,GAAGT,QAK1B,OAEI,6BAEQM,ICNDK,EAbG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OACI,yBAAKX,UAAU,OACX,2BACIY,KAAK,SACLC,YAAY,gBACZb,UAAU,mCACVc,SAAUH,MCOXI,EAdA,SAACnB,GACZ,OAGI,yBAAKoB,MAAO,CACRC,SAAU,SACVC,OAAQ,kBACRC,OAAQ,UAEPvB,EAAMwB,WCeJC,E,kDAtBX,WAAYzB,GAAQ,IAAD,8BACf,cAAMA,IACD0B,MAAQ,CACTC,UAAU,GAHC,E,8DAQDC,EAAOC,GAErBC,KAAKC,SAAS,CAAEJ,UAAU,M,+BAI1B,OAA4B,IAAxBG,KAAKJ,MAAMC,SACJ,0DAEAG,KAAK9B,MAAMwB,a,GAlBFQ,aCyDbC,G,wDAlDX,aAAe,IAAD,8BACV,gBAoBJC,eAAiB,SAACC,GAEd,EAAKJ,SAAS,CACVK,YAAaD,EAAME,OAAOC,SAtB9B,EAAKZ,MAAQ,CACTlB,OAAQ,GACR4B,YAAa,IAJP,E,gEAQO,IAAD,OAChBG,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACF,EAAKZ,SACD,CAAEvB,OAAQmC,S,+BAehB,IAAD,EAC2Bb,KAAKJ,MAA7BlB,EADH,EACGA,OAAQ4B,EADX,EACWA,YACZQ,EAAiBpC,EAAOqC,QACxB,SAAAC,GAAW,OAAOA,EAAM7C,KAAK8C,cAAcC,SAASZ,EAAYW,kBAGpE,OAAQvC,EAAOyC,OAGP,yBAAK7C,UAAU,MACX,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWW,aAAce,KAAKI,iBAC9B,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAU1B,OAAQoC,OAPlC,wBAAIxC,UAAU,SAAd,e,GArCM4B,c,MCIEkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H7B,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAApC,GACLqC,QAAQrC,MAAMA,EAAMsC,a","file":"static/js/main.38a9fda0.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = (props) => {\n    const { name, email, id } = props;\n    return (\n        <div className='tc bg-light-green dib br3 pa2 ma2 grow bw2 shadow-5'>\n            <img src={`https://robohash.org/${id}?size=200x200`} alt=\"robots\"></img>\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\n// need to deconstruct the argument parameter bf using the variables (name, email, id)\nconst CardList = ({ robots }) => {\n    // if (true) {throw new Error('CardList went wrong.')};\n    const cardArray = robots.map((user, i) => {\n        return (\n            <Card\n                key={i}\n                name={robots[i].name}\n                email={robots[i].email}\n                id={robots[i].id} />\n        )\n    });\n    // console.log(cardArray);\n    // console.log(cardArray[0]);\n    return (\n        // the component can return only one JSX element(object), so wrapped them in a <div></div>\n        <div>\n            {\n                cardArray\n            }\n        </div>\n    )\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({searchChange}) => {\n    return (\n        <div className='pa2'>\n            <input\n                type=\"search\"\n                placeholder='search robots'\n                className='pa3 ba b--green bg-lightest-blue'\n                onChange={searchChange}\n            />\n        </div>\n    );\n}\n \nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n        // In the JSX syntax: put the react component object accordingly\n        // props.children == <CardList .>\n        <div style={{\n            overflow: 'scroll',\n            border: '5px solid black',\n            height: '800px'\n        }}>\n            {props.children}\n        </div>\n    )\n}\n\nexport default Scroll;","import React, { Component } from 'react';\n\n// A smart component, a container\nclass ErrorBoundary extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n    // catch and handle the error just like the the catch() \n    // does in the try.catch.log JS error handling\n    componentDidCatch(error, info) {\n        // change component's state to display the different component (when error catched)\n        this.setState({ hasError: true });\n    }\n\n    render() {\n        if (this.state.hasError === true) {\n            return <h1>Oooops! There is an error!</h1>\n        } else {\n            return this.props.children;\n        }\n    }\n}\n\nexport default ErrorBoundary;","import React, { Component } from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundary from '../components/ErrorBoundary';\nimport './App.css';\n\n// class form of component App\nclass App extends Component {\n    // constructor of App class\n    constructor() {\n        super();\n        this.state = {\n            robots: [],\n            searchField: ''\n        }\n    }\n\n    componentDidMount() {\n        fetch('https://jsonplaceholder.typicode.com/users')\n            .then(response => response.json())\n            .then(users => {\n                this.setState(\n                    { robots: users }\n                )\n            });\n    }\n\n    // event method that used to change the state of App \n    // Will be passed to the child component SearchBox that trigger the event\n    // Note: use arrow function to make the this refer to the Component where the function defined, ie, App\n    onSearchChange = (event) => {\n        // Do not change state variables directly. Always change via this.setState() function\n        this.setState({\n            searchField: event.target.value\n        });\n    }\n\n    render() {\n        const { robots, searchField } = this.state;\n        let robotsFiltered = robots.filter(\n            robot => { return robot.name.toLowerCase().includes(searchField.toLowerCase()) }\n        );\n\n        return !robots.length ?\n            <h1 className='f1 tc'>Loading</h1> :\n            (\n                <div className='tc'>\n                    <h1 className='f1'>RoboFriends</h1>\n                    <SearchBox searchChange={this.onSearchChange} />\n                    <Scroll>\n                        <ErrorBoundary>\n                            <CardList robots={robotsFiltered} />\n                        </ErrorBoundary> \n                    </Scroll>\n                </div>\n            );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App'\nimport 'tachyons'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />, document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}